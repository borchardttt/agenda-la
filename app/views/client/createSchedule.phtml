<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agende seu Horário</title>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/pt.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-[#F4E1C1] font-sans leading-normal tracking-normal">
<section class="flex justify-center items-center py-12">
    <div class="bg-white p-8 rounded-lg shadow-md w-full max-w-lg">
        <h2 class="text-2xl font-semibold text-center text-[#5C4033] mb-6">Agende seu horário</h2>
        <form id="appointmentForm" action="/client/createScheduling" method="POST">
            <div class="mb-4">
                <label for="barber_id" class="block text-[#5C4033] font-medium mb-2">Escolha o barbeiro</label>
                <select id="barber_id" name="barber_id" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#C78E31]" required>
                    <option value="">Selecione um barbeiro</option>
                    <?php foreach ($barbers as $barber) : ?>
                        <option value="<?= $barber->id ?>"
                                data-services='<?= json_encode(array_map(function($service) {
                                    return [
                                        'id' => $service->id,
                                        'name' => $service->attributes['name'],
                                    ];
                                }, $barbersServices[$barber->id] ?? [])) ?>'
                                data-availability='<?= json_encode($barbersDisponibility[$barber->id] ?? []) ?>'>
                            <?= $barber->name ?>
                        </option>
                    <?php endforeach; ?>
                </select>

            </div>

            <div class="mb-4">
                <label for="service_id" class="block text-[#5C4033] font-medium mb-2">Escolha o serviço</label>
                <select id="service_id" name="service_id" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#C78E31]" required>
                    <option value="">Selecione um serviço</option>
                </select>
            </div>

            <div class="mb-4">
                <label for="date" class="block text-[#5C4033] font-medium mb-2">Data e Hora</label>
                <input type="text" id="date" name="date" class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-[#C78E31]" required>
            </div>

            <button type="submit" class="w-full bg-[#C78E31] text-[#5C4033] py-3 rounded-lg text-lg font-semibold hover:bg-[#D3B18C]">
                Confirmar Agendamento
            </button>
        </form>
    </div>
</section>

<footer class="bg-[#5C4033] text-[#F4E1C1] py-6 text-center">
    <p>&copy; 2024 Agenda-la. Todos os direitos reservados.</p>
</footer>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const barberSelect = document.getElementById("barber_id");
        const serviceSelect = document.getElementById("service_id");
        let datetimePicker = flatpickr("#date", {
            enableTime: true,
            dateFormat: "Y-m-d H:i",
            minDate: "today",
            locale: "pt",
            disable: [],
            minTime: "08:00",
            maxTime: "18:00"
        });

        barberSelect.addEventListener("change", function () {
            const selectedOption = this.options[this.selectedIndex];
            const services = JSON.parse(selectedOption.getAttribute("data-services") || "[]");
            const barberAvailability = JSON.parse(selectedOption.getAttribute("data-availability") || "{}");

            // Limpa os serviços anteriores
            serviceSelect.innerHTML = '<option value="">Selecione um serviço</option>';
            services.forEach(service => {
                console.log(service)
                let option = document.createElement("option");
                option.value = service.id;
                option.textContent = service.name;
                serviceSelect.appendChild(option);
            });

            if (Object.keys(barberAvailability).length > 0) {
                updateAvailableDays(barberAvailability.week_days, datetimePicker);
                updateAvailableHours(barberAvailability.initial_hour, barberAvailability.final_hour, datetimePicker);
            }
        });
    });

    function updateAvailableDays(weekDays, datetimePicker) {
        if (!weekDays || weekDays.length === 0) {
            datetimePicker.set("disable", [{ from: "2000-01-01", to: "2100-01-01" }]);
            return;
        }

        const daysDisabled = [0, 1, 2, 3, 4, 5, 6].filter(day => !weekDays.includes(String(day)));

        datetimePicker.set("disable", [
            function(date) {
                return daysDisabled.includes(date.getDay());
            }
        ]);
    }

    function updateAvailableHours(initialHour, finalHour, datetimePicker) {
        if (!initialHour || !finalHour) return;

        datetimePicker.set("minTime", initialHour);
        datetimePicker.set("maxTime", finalHour);

        datetimePicker.config.onOpen = [
            function(selectedDates, dateStr, instance) {
                const selectedDate = selectedDates[0];
                if (!selectedDate) return;

                const minTime = new Date(selectedDate);
                const maxTime = new Date(selectedDate);
                const [initialHours, initialMinutes] = initialHour.split(':');
                const [finalHours, finalMinutes] = finalHour.split(':');

                minTime.setHours(initialHours, initialMinutes);
                maxTime.setHours(finalHours, finalMinutes);

                instance.set("minTime", minTime.toLocaleTimeString("pt-BR", { hour: "2-digit", minute: "2-digit" }));
                instance.set("maxTime", maxTime.toLocaleTimeString("pt-BR", { hour: "2-digit", minute: "2-digit" }));
            }
        ];
    }
</script>

</body>
</html>
